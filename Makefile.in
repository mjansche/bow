#   @configure_input@
#
#   Makefile for the "Bag Of Words Library", libbow.
#   Copyright (C) 1996, 1997 Free Software Foundation, Inc.
#
#   Written by:  Andrew Kachites McCallum <mccallum@cs.cmu.edu>
#   Date: September 1996
#
#   This file is part of the Bag-Of-Words Library, `libbow'.
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Library General Public
#   License as published by the Free Software Foundation; either
#   version 2 of the License, or (at your option) any later version.
#   
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public
#   License along with this library; if not, write to the Free
#   Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

SHELL = /bin/sh

#### Start of system configuration section. ####

default:

srcdir = @srcdir@
VPATH = @srcdir@
RANLIB = @RANLIB@
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
MAKEINFO = makeinfo
TEXI2DVI = texi2dvi
PERL = @PERL@

CC = @CC@

DEFS = @DEFS@
LIBS = @LIBS@
     
# All these are optional.  You can redifine CFLAGS, CPPFLAGS,
# INCLUDEFLAGS and LDFLAGS on the command line however you like.
CFLAGS = -g -Wall
CPPFLAGS = 
INCLUDEFLAGS =
LDFLAGS =

prefix = @prefix@
exec_prefix = @exec_prefix@

# Installation locations
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
includedir = $(prefix)/include
infodir = $(prefix)/info
scmdir = $(prefix)/lib/scm

#### End of system configuration section. ####

include $(srcdir)/Version

ALL_LIBS = $(LIBS) -L. -lbow -lm
ALL_INCLUDE_FLAGS = $(GUILE_INCLUDES) $(GNUSTEP_BASE_INCLUDES)
ALL_CPPFLAGS = $(CPP_FLAGS) $(ALL_INCLUDE_FLAGS)
ALL_CFLAGS = $(CFLAGS)
ALL_LDFLAGS = $(LDFLAGS) $(ALL_LIBS)

LIBBOW_H_FILES = \
libbow.h

LIBBOW_C_FILES = \
array.c \
barrel.c \
bitvec.c \
bmalloc.c \
defparser.c \
dv.c \
docnames.c \
email.c \
error.c \
heap.c \
info_gain.c \
int4docn.c \
int4str.c \
int4word.c \
io.c \
istext.c \
lex-gram.c \
lex-html.c \
lex-indirect.c \
lex-simple.c \
naivebayes.c \
primes.c \
prind.c \
sarray.c \
scan.c \
score.c \
split.c \
stem.c \
stoplist.c \
stopwords.c \
vpc.c \
weight.c \
wi2dvf.c \
wv.c

LIBBOW_O_FILES = $(LIBBOW_C_FILES:.c=.o)

# Other name ideas: longbow, archer, shoelace,...
DEMO_C_FILES = \
rainbow.c \
arrow.c

DEMO_O_FILES = $(DEMO_C_FILES:.c=.o)
DEMO_EXECUTABLES = $(DEMO_C_FILES:.c=)

PERL_FILES = \
rainbow-stats.pl

PERL_RUNNABLE_FILES = $(PERL_FILES:.pl=)

DOC_TEXI_FILES = \
libbow.texi \
rainbow.texi \

DOC_INFO_FILES = $(DOC_TEXI_FILES:.texi=.info)
DOC_DVI_FILES = $(DOC_TEXI_FILES:.texi=.dvi)

OTHER_TEXI_FILES = \
libbow-desc.texi \
install.texi \
readme.texi \
version.texi

DIST_FILES = \
$(LIBBOW_C_FILES) \
$(LIBBOW_H_FILES) \
$(DEMO_C_FILES) \
$(PERL_FILES) \
$(DOC_TEXI_FILES) \
$(OTHER_TEXI_FILES) \
ChangeLog \
HACKING \
INSTALL \
Makefile.in \
README \
Version \
configure \
configure.in \
install-sh \
mkinstalldirs \
p.inc

# Rules

default: $(DEMO_EXECUTABLES) $(PERL_RUNNABLE_FILES)

all: libbow.a $(DEMO_EXECUTABLES) $(PERL_RUNNABLE_FILES)

# Compiling code

libbow.a: $(LIBBOW_O_FILES)
	$(AR) rc $@ $^
	$(RANLIB) $@

# xxx Each one doesn't actually depend on *all* DEMO_O_FILES.  Fix this.
$(DEMO_EXECUTABLES): libbow.a $(DEMO_O_FILES)
	$(CC) $(CFLAGS) $@.o -o $@ $(ALL_LDFLAGS)

$(PERL_RUNNABLE_FILES): $(PERL_FILES)
	rm -f $@
	cat $@.pl | sed -e 's,/usr/bin/perl,${PERL},' > $@
	chmod a+x $@

# Compiling documentation

MAKEINFO_FLAGS = -I $(srcdir)
%.dvi: $*.texi version.texi
	$(TEXI2DVI) $(srcdir)/$*.texi
%.info: $*.texi version.texi
	$(MAKEINFO) $(MAKEINFO_FLAGS) $(srcdir)/$*.texi
INSTALL: install.texi version.texi
	$(MAKEINFO) $(MAKEINFO_FLAGS) -o INSTALL -D INSTALL_ONLY \
	--no-header --no-split $(srcdir)/install.texi
README: readme.texi version.texi
	$(MAKEINFO) $(MAKEINFO_FLAGS) -o README -D README_ONLY \
	--no-header --no-split $(srcdir)/readme.texi

version.texi: $(srcdir)/Version
	rm -f version.texi
	echo '@set BOW_VERSION' $(BOW_VERSION) \
		> version.texi
	if [ $(BOW_FTP_MACHINE) ]; then \
		echo '@set BOW_FTP_MACHINE $(BOW_FTP_MACHINE)' \
		>> version.texi; fi
	if [ $(LIBBOW_FTP_DIRECTORY) ]; then \
		echo '@set BOW_FTP_DIRECTORY $(BOW_FTP_DIRECTORY)' \
		>> version.texi; fi

# libbow.h has macros that indicate the libbow's version number; these
# must be kept up-to-date.
libbow.h: Version
	rm -f libbow-tmp.h~
	mv libbow.h libbow-tmp.h~
	cat libbow-tmp.h~ | sed -e \
	's/e BOW_MAJOR_VERSION .*/e BOW_MAJOR_VERSION $(BOW_MAJOR_VERSION)/' \
	| sed -e \
	's/e BOW_MINOR_VERSION .*/e BOW_MINOR_VERSION $(BOW_MINOR_VERSION)/' \
	> libbow.h

# The compiled functions in these files are defined entirely by libbow.h.
io.o bmalloc.o: libbow.h

# The compiled functions in these files are defined entired by p.inc.
p-alpha.o p-alonly.o p-white.o: p.inc

# Compiling the Makefile

Makefile: Makefile.in config.status
	$(SHELL) config.status
config.status: configure
	$(SHELL) $(srcdir)/configure --no-create
configure: configure.in
	cd $(srcdir); autoconf

# Installing

installdirs:
	$(srcdir)/mkinstalldirs $(bindir) $(includedir) $(libdir)
INSTALL_FILES = libbow.a libbow.h $(DEMO_EXECUTABLES) $(PERL_RUNNABLE_FILES)
install: $(INSTALL_FILES) installdirs
	rm -f $(libdir)/libbow.a
	cp libbow.a $(libdir)
	$(RANLIB) $(libdir)/libbow.a
	rm -f $(includedir)/libbow.h
	cp libbow.h $(includedir)
	cd $(bindir) ; rm -f $(DEMO_EXECUTABLES) $(PERL_RUNNABLE_FILES)
	$(INSTALL) $(DEMO_EXECUTABLES) $(bindir)
	$(INSTALL) $(PERL_RUNNABLE_FILES) $(bindir)

# Cleaning

mostlyclean:
	rm -f core *~
clean: mostlyclean
	rm -f *.o libbow.a $(DEMO_EXECUTABLES) *.info *.dvi
maintainer-clean: clean
	rm -f $(PERL_RUNNABLE_FILES) configure README INSTALL

# Making a distribution .tar.gz file

dist: $(DIST_FILES)
	cvs rtag -F release-`tr . - $(BOW_VERSION)` bow
	echo bow-$(BOW_VERSION) > .fname
	rm -rf `cat .fname`
	mkdir `cat .fname`
	for file in $(DIST_FILES); do \
	  ln $$file `cat .fname`/$$file ; \
	done
	tar -chvf `cat .fname`.tar `cat .fname`
	rm -f `cat .fname`.tar.gz
	gzip -9 `cat .fname`.tar
	rm -rf `cat .fname` .fname

diff: $(DIST_FILES)
	@if [ ! $(OLD) ] ; then \
	  echo You must set OLD to the version number against which to diff ; \
	  exit -1 ; \
	fi
	@if [ ! $(NEW) ] ; then \
	  echo You must set NEW to the version number with which to diff ; \
	  exit -1 ; \
	fi
	gunzip -c bow-$(NEW).tar.gz | (cd /tmp ; tar -xf -)
	gunzip -c bow-$(OLD).tar.gz | (cd /tmp ; tar -xf -)
	rm -f bow-$(OLD)-$(NEW).diff
	-diff -u -r /tmp/bow-$(OLD) /tmp/bow-$(NEW) > bow-$(OLD)-$(NEW).diff
	rm -rf /tmp/bow-$(NEW)
	rm -rf /tmp/bow-$(OLD)

snapshot: $(DIST_FILES)
	echo bow-`date +%y%m%d` > .fname
	cvs rtag -F snapshot-`cat .fname` bow
	rm -rf `cat .fname`
	mkdir `cat .fname`
	for file in $(DIST_FILES); do \
	  ln $$file `cat .fname`/$$file ; \
	done
	tar -chvf `cat .fname`.tar `cat .fname`
	rm -f `cat .fname`.tar.gz
	gzip -9 `cat .fname`.tar
	rm -rf `cat .fname` .fname
